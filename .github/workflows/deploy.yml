name: Deploy Tagged Release

on:
  push:
    tags:
      - 'v*'
  repository_dispatch:
    types: [trigger-deploy]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-ssh:
    name: Test SSH Access
    runs-on: ubuntu-latest
    steps:
      - name: Test SSH Login
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.AGC_CI_PROD_KEY }}
          script: |
            echo "SSH access verified: $(hostname)"

  deploy:
    name: Deploy Linux Artifact
    runs-on: ubuntu-latest
    needs: test-ssh

    steps:
      - name: Set version from tag
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            TAG="${{ github.event.client_payload.tag }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi

          CLEAN_TAG=${TAG#v}
          ZIP_NAME="AGC_Entbannung_linux_x64_${TAG}.zip"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "GIT_TAG_VERSION=${CLEAN_TAG}+$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Download release artifact
        uses: dsaltares/fetch-gh-release-asset@v1.1.2
        with:
          file: ${{ env.ZIP_NAME }}
          repo: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          target: release.zip

      - name: Unpack release artifact
        run: |
          mkdir -p publish
          unzip release.zip -d publish

      - name: Create backup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.AGC_CI_PROD_KEY }}
          script: |
            BACKUP_DIR="/srv/DiscordBots/Backups/AGCEntbannung-${{ env.GIT_TAG_VERSION }}-$(date +%Y%m%d-%H%M%S)"
            mkdir -p $BACKUP_DIR
            # Copy everything except logs and data folders
            rsync -av --exclude='logs' --exclude='data' /srv/DiscordBots/AGCEntbannung/ $BACKUP_DIR/ || echo "No files to backup or backup failed"
            ls -dt /srv/DiscordBots/Backups/AGCEntbannung-* | tail -n +11 | xargs -r rm -rf
          timeout: 60s

      - name: Deploy to server
        id: deploy
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.AGC_CI_PROD_KEY }}
          source: "./publish/*"
          target: "/srv/DiscordBots/AGCEntbannung"
          strip_components: 1
          timeout: 120s

      - name: Restart service and verify
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.AGC_CI_PROD_KEY }}
          script: |
            sudo systemctl restart agc-entbannung

            sleep 20

            if sudo systemctl is-active --quiet agc-entbannung; then
              echo "‚úÖ Service started successfully"
              echo "Deployed version: ${{ env.GIT_TAG_VERSION }}"
            else
              echo "‚ùå Service failed to start, rolling back..."
              LATEST_BACKUP=$(ls -dt /srv/DiscordBots/Backups/AGCEntbannung-* | head -n 1)
              if [ -n "$LATEST_BACKUP" ]; then
                rsync -av --exclude='logs' --exclude='data' $LATEST_BACKUP/ /srv/DiscordBots/AGCEntbannung/
                sudo systemctl restart agc-entbannung
                echo "üîÅ Rolled back to $LATEST_BACKUP"
                exit 1
              else
                echo "‚ö†Ô∏è No backup found, cannot roll back"
                exit 1
              fi
            fi
          timeout: 300s
